

variables:
  CACHE_PATH: "cache"
  GIT_STRATEGY: fetch
  LINUX_TAG: "linux"
  WIN_TAG: "windows"
  MACOS_TAG: "macos"

stages:
  - buildAndTest

cache:
  key: cache
  paths:
    - $CACHE_PATH/$CI_COMMIT_BRANCH/

.build_any:
  script:
    - buildDir=$CACHE_PATH/$CI_COMMIT_BRANCH/build-$ARCHITECTURE-$COMPILER_C-$BUILD_TYPE
    - installDir=$CACHE_PATH/$CI_COMMIT_BRANCH/install-$ARCHITECTURE-$COMPILER_C-$BUILD_TYPE
    - mkdir -p $buildDir
    - cmake -B $buildDir -DCMAKE_C_COMPILER=$COMPILER_C -DCMAKE_CXX_COMPILER=$COMPILER_CXX -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$installDir -DHUB_ENABLE_TESTS=ON -DHUB_ENABLE_EXAMPLES=ON $CMAKE_CONFIGURE_ARGS
    # - cmake --build $buildDir --config $BUILD_TYPE --parallel -j $(expr $(nproc --all) - 1)
    - cmake --build $buildDir --config $BUILD_TYPE
    - cmake --install $buildDir --config $BUILD_TYPE

.test_any:
  script:
    - buildDir=$CACHE_PATH/$CI_COMMIT_BRANCH/build-$ARCHITECTURE-$COMPILER_C-$BUILD_TYPE
    - cmake --build $buildDir --config $BUILD_TYPE --target hub-tests-bin

############################################# Linux

buildAndTest-linux-clang-x64-release:
  stage: buildAndTest
  tags:
    - $LINUX_TAG
  script:
    - apt update
    - apt install -y cmake clang
    - COMPILER_C=clang
    - COMPILER_CXX=clang++
    - ARCHITECTURE=x64
    - BUILD_TYPE=Release
    - CMAKE_CONFIGURE_ARGS=""
    - !reference [.build_any, script]
    - !reference [.test_any, script]

# build-linux-gcc-x64-debug:
#   stage: buildAndTest
#   tags:
#     - $LINUX_TAG
#   script:
#     - COMPILER_C=gcc
#     - COMPILER_CXX=g++
#     - ARCHITECTURE=x64
#     - BUILD_TYPE=Debug
#     - CMAKE_CONFIGURE_ARGS=""
#     - !reference [.build_any, script]
#     - !reference [.test_any, script]

############################################# Windows

build-windows-cl-x64-release:
  stage: buildAndTest
  tags:
    - $WIN_TAG
  script:
    # - apt update
    # - apt install -y cmake clang
    - COMPILER_C=cl
    - COMPILER_CXX=cl
    - ARCHITECTURE=x64
    - BUILD_TYPE=Release
    - CMAKE_CONFIGURE_ARGS="-A $ARCHITECTURE"
    - !reference [.build_any, script]

# build-windows-cl-Win32-debug:
#   stage: buildAndTest
#   tags:
#     - $WIN_TAG
#   script:
#     - COMPILER_C=cl
#     - COMPILER_CXX=cl
#     - ARCHITECTURE=Win32
#     - BUILD_TYPE=Debug
#     - CMAKE_CONFIGURE_ARGS="-A $ARCHITECTURE"
#     - !reference [.build_any, script]

############################################# MacOS

build-macos-clang-arm64-debug:
  stage: buildAndTest
  tags:
    - $MACOS_TAG
  script:
    # - apt update
    # - apt install -y cmake clang
    - COMPILER_C=clang
    - COMPILER_CXX=clang++
    - ARCHITECTURE=arm64
    - BUILD_TYPE=Debug
    - CMAKE_CONFIGURE_ARGS="-DCMAKE_OSX_ARCHITECTURES=$ARCHITECTURE"
    - !reference [.build_any, script]

# build-macos-llvm_gcc-arm64-debug:
#   stage: buildAndTest
#   tags:
#     - $MACOS_TAG
#   script:
#     - COMPILER_C=llvm-gcc
#     - COMPILER_CXX=llvm-g++
#     - ARCHITECTURE=arm64
#     - BUILD_TYPE=Debug
#     - CMAKE_CONFIGURE_ARGS=""
#     - !reference [.build_any, script]
#

# buildAndTest-linux-gcc-x64-release:
#   stage: buildAndTest
#   tags:
#     - $LINUX_TAG
#   script:
#     - apt update
#     - apt install -y cmake gcc
#     - COMPILER_C=gcc
#     - COMPILER_CXX=g++
#     - ARCHITECTURE=x64
#     - BUILD_TYPE=Release
#     - CMAKE_CONFIGURE_ARGS=""
#     - !reference [.build_any, script]
#     - !reference [.test_any, script]
#
