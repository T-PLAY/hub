
variables:
  CACHE_PATH: "cache16"
  GIT_STRATEGY: fetch
  LINUX_TAG: "linux"
  WIN_TAG: "windows"
  MACOS_TAG: "macOs"

# .branches_with_ci:
  # only:
    # - master

stages: 
  - build
  - test
  # - coverage
  - code-quality
  # - doc

cache:
  key: cache
  paths:
    - $CACHE_PATH/$CI_COMMIT_BRANCH/

.build_any:
  script:
    - buildDir=$CACHE_PATH/$CI_COMMIT_BRANCH/build-$ARCHITECTURE-$COMPILER_C-$BUILD_TYPE
    - installDir=$CACHE_PATH/$CI_COMMIT_BRANCH/install-$ARCHITECTURE-$COMPILER_C-$BUILD_TYPE
    - mkdir -p $buildDir
    - cmake -B $buildDir -DCMAKE_C_COMPILER=$COMPILER_C -DCMAKE_CXX_COMPILER=$COMPILER_CXX -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=$installDir $CMAKE_CONFIGURE_ARGS
    - cmake --build $buildDir --config $BUILD_TYPE --parallel -j $(expr $(nproc --all) - 1)
    - cmake --install $buildDir --config $BUILD_TYPE

.test_any:
  script:
    - buildDir=$CACHE_PATH/$CI_COMMIT_BRANCH/build-$ARCHITECTURE-$COMPILER_C-$BUILD_TYPE
    - cmake --build $buildDir --config $BUILD_TYPE --target hub-tests-bin


############################################# Builds ############################################

############################################# Linux (build)

build-linux-clang-x64-release:
  stage: build
  tags:
    - $LINUX_TAG
  script:
    - COMPILER_C=clang
    - COMPILER_CXX=clang++
    - ARCHITECTURE=x64
    - BUILD_TYPE=Release
    - CMAKE_CONFIGURE_ARGS="-DHUB_BUILD_DOC=ON"
    - !reference [.build_any, script]

build-linux-gcc-x64-debug:
  stage: build
  tags:
    - $LINUX_TAG
  script:
    - COMPILER_C=gcc
    - COMPILER_CXX=g++
    - ARCHITECTURE=x64
    - BUILD_TYPE=Debug
    - CMAKE_CONFIGURE_ARGS=""
    - !reference [.build_any, script]

############################################# Windows (build)

build-windows-cl-x64-release:
  stage: build
  tags:
    - $WIN_TAG
  script:
    - COMPILER_C=cl
    - COMPILER_CXX=cl
    - ARCHITECTURE=x64
    - BUILD_TYPE=Release
    - CMAKE_CONFIGURE_ARGS="-A $ARCHITECTURE"
    - !reference [.build_any, script]

build-windows-cl-Win32-debug:
  stage: build
  tags:
    - $WIN_TAG
  script:
    - COMPILER_C=cl
    - COMPILER_CXX=cl
    - ARCHITECTURE=Win32
    - BUILD_TYPE=Debug
    - CMAKE_CONFIGURE_ARGS="-A $ARCHITECTURE"
    - !reference [.build_any, script]

############################################# MacOS (build)

build-macOs-clang-arm64-debug:
  stage: build
  tags:
    - $MACOS_TAG
  script:
    - COMPILER_C=clang
    - COMPILER_CXX=clang++
    - ARCHITECTURE=arm64
    - BUILD_TYPE=Debug
    - CMAKE_CONFIGURE_ARGS="-DCMAKE_OSX_ARCHITECTURES=$ARCHITECTURE"
    - !reference [.build_any, script]

build-macOs-llvm_gcc-arm64-debug:
  stage: build
  tags:
    - $MACOS_TAG
  script:
    - COMPILER_C=llvm-gcc
    - COMPILER_CXX=llvm-g++
    - ARCHITECTURE=arm64
    - BUILD_TYPE=Debug
    - CMAKE_CONFIGURE_ARGS=""
    - !reference [.build_any, script]


############################################ TESTS ##############################################

############################################# Linux (test)

test-linux-clang-x64-release:
  stage: test
  tags:
    - $LINUX_TAG
  script:
    - COMPILER_C=clang
    - ARCHITECTURE=x64
    - BUILD_TYPE=Release
    - !reference [.test_any, script]
  needs:
    - job: build-linux-clang-x64-release
      optional: true


test-linux-gcc-x64-debug:
  stage: test
  tags:
    - $LINUX_TAG
  script:
    - COMPILER_C=gcc
    - ARCHITECTURE=x64
    - BUILD_TYPE=Debug
    - !reference [.test_any, script]
  needs:
    - job: build-linux-gcc-x64-debug
      optional: true

# ############################################ Windows (test)

test-windows-cl-x64-release:
  stage: test
  tags:
    - $WIN_TAG
  script:
    - COMPILER_C=cl
    - ARCHITECTURE=x64
    - BUILD_TYPE=Release
    - !reference [.test_any, script]
  needs:
    - job: build-windows-cl-x64-release
      optional: true

test-windows-cl-Win32-debug:
  stage: test
  tags:
    - $WIN_TAG
  script:
    - COMPILER_C=cl
    - ARCHITECTURE=Win32
    - BUILD_TYPE=Debug
    - !reference [.test_any, script]
  needs:
    - job: build-windows-cl-Win32-debug
      optional: true

# ############################################ MacOs (test)

test-macOs-clang-arm64-debug:
  stage: test
  tags:
    - $MACOS_TAG
  script:
    - COMPILER_C=clang
    - ARCHITECTURE=arm64
    - BUILD_TYPE=Debug
    - !reference [.test_any, script]
  needs:
    - job: build-macOs-clang-arm64-debug
      optional: true

test-macOs-llvm_gcc-arm64-debug:
  stage: test
  tags:
    - $MACOS_TAG
  script:
    - COMPILER_C=llvm-gcc
    - ARCHITECTURE=arm64
    - BUILD_TYPE=Debug
    - !reference [.test_any, script]
  needs:
    - job: build-macOs-llvm_gcc-arm64-debug
      optional: true

############################################ Others ##############################################

cppCheck-linux-clang-x64-release:
  stage: code-quality
  tags:
    - $LINUX_TAG
  script:
    - buildDir=$CACHE_PATH/$CI_COMMIT_BRANCH/build-x64-clang-Release
    - cmake --build $buildDir --target hub-cppCheck
  needs:
    - job: test-linux-clang-x64-release
      optional: true

doc-doxygen-linux-clang-x64-release:
  stage: code-quality
  tags:
    - $LINUX_TAG
  script:
    - buildDir=$CACHE_PATH/$CI_COMMIT_BRANCH/build-x64-clang-Release
    - cmake --build $buildDir --target hub-doc-doxygen
  needs:
    - job: cppCheck-linux-clang-x64-release
      optional: true

# format-linux-clang-x64-release:
#   stage: format
#   tags:
#     - $LINUX_TAG
#   script:
#     - buildDir=$CACHE_PATH/$CI_COMMIT_BRANCH/build-x64-clang-Release
#     - cmake --build $buildDir --target hub-format
#     - git diff --exit-code
#   needs:
#     - job: cppCheck-linux-clang-x64-release
#       optional: true

# doc-sphinx-linux-clang-x64-release:
#   stage: doc
#   tags:
#     - $LINUX_TAG
#   script:
#     - buildDir=$CACHE_PATH/$CI_COMMIT_BRANCH/build-x64-clang-Release
#     - cmake --build $buildDir --target hub-doc-sphinx
#   needs:
#     - job: doc-doxygen-linux-clang-x64-release
#       optional: true
#
# coverage:
#   stage: coverage
#   tags:
#     - $LINUX_TAG
#   script:
#     - buildDir=$CACHE_PATH/$CI_COMMIT_BRANCH/build-x64-clang-Release
#     - cmake --build $buildDir --target hub-coverage
