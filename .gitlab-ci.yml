# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# using Radium development dedicated image
image: stormirit/radium_dev:latest

#https://docs.gitlab.com/ee/ci/yaml/#extends
.branches_with_ci:
  only:
    - master

stages: 
  - dep
  - build
  - test
  - coverage
  - format
  - doc

# cache:
#     key: ${CI_COMMIT_REF_SLUG}
#     paths:
#       - build/
cache:
  key: cache
  paths:
    - cache/
    # - dep-cache/    
    # - build-gcc-release/
    # - build-clang-debug/
    # - sphinx-cache/
    # - format-cache/

before_script:
  - |-
    if [ ! -e cache ]; then
      mkdir cache
    fi
    cd cache
  # - mkdir -pv cache
  # - cd cache
  # - rm -r apt-cache
  # - mkdir -pv apt-cache
  # - |-
  #   if [ -e apt-cache ]; then
  #     cp -rT apt-cache/ /;
  #   fi
  #   if [ -e sphinx-cache ]; then
  #     cp -rT sphinx-cache/ /;
  #   fi
  # - find apt-cache

# artifacts:
#     # key: ${CI_COMMIT_REF_SLUG}
#     expire_in: 30 days
#     paths:
# #      - build/_deps/
#       - build/

dep:
  stage: dep
  script:
    - |-
      # rm -rf dep-cache
      if [ ! -e dep-cache ]; then
        apt update
        apt install -y doxygen clang libclang-dev lcov

        mkdir -pv dep-cache/usr/bin/
        mkdir -pv dep-cache/usr/share/$(basename /usr/share/cmake-*)/Modules
        mkdir -pv dep-cache/usr/lib/x86_64-linux-gnu/
        mkdir -pv dep-cache/usr/lib/llvm-11/lib/
        mkdir -pv dep-cache/usr/lib/llvm-11/bin/

        cp /usr/bin/doxygen dep-cache/usr/bin/   
        cp /usr/share/cmake-*/Modules/FindDoxygen.cmake dep-cache/usr/share/$(basename /usr/share/cmake-*)/Modules/
        cp -ar /usr/lib/clang* dep-cache/usr/lib/
        cp -a /usr/lib/x86_64-linux-gnu/libclang* dep-cache/usr/lib/x86_64-linux-gnu/
        cp -ra /usr/lib/llvm-11/lib/* dep-cache/usr/lib/llvm-11/lib/
        cp -ar /usr/bin/clang* dep-cache/usr/bin/
        cp -ar /usr/lib/llvm-11/bin/clang* dep-cache/usr/lib/llvm-11/bin/
        cp /usr/bin/lcov dep-cache/usr/bin/
        cp /usr/bin/genhtml dep-cache/usr/bin/
      fi
  # only:
  # - master
      
build-clang-release:
  stage: build
#  before_script:
#    - export PATH=$PATH:/opt/Qt/5.10.0/gcc_64/bin
  script:
    - cp -rT dep-cache/ /;

    - mkdir -p build-clang-release
    - cmake -B build-clang-release -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DHUB_BUILD_STATIC_LIBRARY=ON -DHUB_ENABLE_EXAMPLES=ON -DHUB_BUILD_DOC=ON
    # - cmake -B build-clang-release -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=clang -DCMAKE_BUILD_TYPE=Release
    - cmake --build build-clang-release --config Release
    - cmake --install build-clang-release --config Release
  only:
  - master

build-gcc-debug:
  stage: build
  script:
    - cp -rT dep-cache/ /;
    # - apt update
    # - apt install -y doxygen clang libclang-dev lcov

    - mkdir -p build-gcc-debug
    - cmake -B build-gcc-debug -DCMAKE_CXX_COMPILER=/usr/bin/g++ -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_BUILD_TYPE=Debug -DHUB_ENABLE_TESTS=ON -DHUB_ENABLE_COVERAGE=ON
    # - cmake -B build-gcc-debug -DCMAKE_CXX_COMPILER=/usr/bin/gcc++ -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_BUILD_TYPE=Debug
    - cmake --build build-gcc-debug --config Debug
  
test:
  stage: test
  script:
    - cd build-gcc-release/tests
    - ctest -V
#    - ./runmytests.sh
  only:
  - master

coverage:
  stage: coverage
  script:
    # - cd build-gcc-release/
    - cmake --build-gcc-release/ --target coverage
    - mv build-gcc-release/coverage public/
  artifacts:
    paths:
      - public

doc-doxygen:
  stage: doc
  script:
    - cp -rT dep-cache/ /;

    - cmake --build build-gcc-release --target docs
    - mv build-gcc-release/doc/docs_doxygen/html/ public/
#    - ./runmytests.sh
  artifacts:
    paths:
    - public
  # only:
    # - feature/add-gitlab-pages-support
  only:
  - master

cache-sphinx:
  stage: doc
  script:
    - |-
      cp -rT dep-cache/ /;

      # rm -rf sphinx-cache
      if [ ! -e sphinx-cache ]; then
        apt update
        apt install -y python3-pip clang
        pip3 install breathe sphinx sphinx-sitemap sphinx-rtd-theme

        mkdir -pv sphinx-cache/usr/local/bin/
        mkdir -pv sphinx-cache/usr/lib/
        mkdir -pv sphinx-cache/usr/bin/
        mkdir -pv sphinx-cache/usr/local/lib/
        mkdir -pv sphinx-cache/usr/lib/llvm-11/lib/
        mkdir -pv sphinx-cache/usr/lib/x86_64-linux-gnu/
        
        cp -ar /usr/lib/python* sphinx-cache/usr/lib/
        cp -ar /usr/lib/clang* sphinx-cache/usr/lib/
        cp -a /usr/lib/x86_64-linux-gnu/libclang* sphinx-cache/usr/lib/x86_64-linux-gnu/
        cp -ra /usr/lib/llvm-11/lib/* sphinx-cache/usr/lib/llvm-11/lib/
        cp -a /usr/bin/python* sphinx-cache/usr/bin/
        cp /usr/local/bin/sphinx-build sphinx-cache/usr/local/bin/

        cp -ar /usr/local/lib/python* sphinx-cache/usr/local/lib/
      fi
  only:
  - master


doc-sphinx:
  stage: doc
  script:
    - |-
      cp -rT dep-cache/ /;
      cp -rT sphinx-cache/ /;
      
      ls -la /usr/local/bin/sphinx-build
      find / -name "sphinx-build"
      echo $PATH

      make -C doc/docs_sphinx html
      mv doc/docs_sphinx/_build/html public/
  artifacts:
    paths:
      - public
  only:
  - master

cache-format:
  stage: format
  script:
    - |-
      # rm -rf format-cache
      if [ ! -e format-cache ]; then
        apt update
        apt install -y cmake-format clang-format

        mkdir -pv format-cache/usr/bin/
        mkdir -pv format-cache/usr/lib/llvm-11/bin/
        mkdir -pv format-cache/usr/lib/llvm-11/lib/
        mkdir -pv format-cache/usr/lib/x86_64-linux-gnu/

        cp /usr/bin/cmake-format format-cache/usr/bin/
        cp /usr/bin/clang-format format-cache/usr/bin/
        cp /usr/bin/clang-format-11 format-cache/usr/bin/
        cp /usr/lib/llvm-11/bin/clang-format format-cache/usr/lib/llvm-11/bin/
        cp -a /usr/lib/x86_64-linux-gnu/libclang* format-cache/usr/lib/x86_64-linux-gnu/
        cp -ra /usr/lib/llvm-11/lib/* format-cache/usr/lib/llvm-11/lib/
        cp -a /usr/bin/python* format-cache/usr/bin/
        cp -ar /usr/lib/python* format-cache/usr/lib/
      fi
  only:
  - master

format:
  stage: format
  script:
    - |-
      cp -rT format-cache/ /;

      scripts/cleanup-project.sh
      git diff --exit-code
  only:
  - master


