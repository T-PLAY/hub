# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ '*' ]
  # pull_request:
    # branches: [ 'main' ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    # runs-on: ubuntu-latest
    runs-on: ${{ matrix.config.os }}
    strategy:
      # fail-fast: false
      matrix:
        config:
          - { name: "Windows MSVC", os: windows-latest, cc: "cl.exe", cxx: "cl.exe", icon: "Windows"}
          - { name: "Ubuntu gcc", os: ubuntu-latest, cc: "gcc", cxx: "g++", icon: "Linux" }
          - { name: "MacOS clang", os: macos-latest, cc: "clang", cxx: "clang++", icon: "Apple" }

    steps:
    - uses: actions/checkout@v3
    # - uses: ssciwr/doxygen-install@v1.3.0

    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=install -DHUB_ENABLE_TESTS=ON -DHUB_BUILD_DOC=ON
      run: cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=install -DHUB_ENABLE_TESTS=ON

      # run: mkdir build && cd build && cmake ../src  -GNinja -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../install -DPONCA_CONFIGURE_EXAMPLES=ON -DPONCA_CONFIGURE_DOC=ON -DPONCA_CONFIGURE_TESTS=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install
      run: cmake --install ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      # working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest -C ${{env.BUILD_TYPE}}
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target hub-tests-bin
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target hub-tests # light tests (no normal/native viewers during test)



    # - name: Doc doxygen
    #   run: cmake --build ${{github.workspace}}/build --target hub-doc-doxygen

  #   - name: Sphinx Build
  # # You may pin to the exact commit or the version.
  # # uses: ammaraskar/sphinx-action@8b4f60114d7fd1faeba1a712269168508d4750d2
  #     uses: ammaraskar/sphinx-action@0.4
  #     with:
  #     # The folder containing your sphinx docs.
  #       docs-folder: ${{github.workspace}}/doc/docs_sphinx
  #       # The command used to build your documentation.
  #       build-command: make html # optional, default is make html
  #       # Run before the build command, you can use this to install system level dependencies, for example with "apt-get update -y && apt-get install -y perl"
  #       pre-build-command: "apt-get update -y"  # optional
          
    # - name: Install Sphinx and Breathe
    #   run: 
    #     sudo apt update -y && sudo apt install -y sphinx-doc
    #     && pip3 install sphinx-rtd-theme breathe sphinx-sitemap

    # - name: Build sphinx doc
    #   run:
    #     cmake --build ${{github.workspace}}/build --target hub-doc-sphinx

    # - name: Deploy to GitHub Pages
    #   uses: peaceiris/actions-gh-pages@v3
    #   # if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    #   with:
    #     # publish_branch: gh-pages
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     publish_dir: ${{github.workspace}}/doc/docs_sphinx/_build/api/
    #     # force_orphan: true

  

