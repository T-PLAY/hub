
find_package(Git QUIET)

# Check if git is found... if (GIT_FOUND AND VERSION_UPDATE_FROM_GIT)
if(GIT_FOUND)
    execute_process(
        COMMAND ${GIT_EXECUTABLE} describe --tags --abbrev=0
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        OUTPUT_VARIABLE ${PROJECT_NAME}_VERSION_STRING
        RESULT_VARIABLE GIT_DESCRIBE_ERROR_CODE
        OUTPUT_STRIP_TRAILING_WHITESPACE)
endif()

set(LATEST_VERSION_MAJOR 2)
set(LATEST_VERSION_MINOR 0)
set(LATEST_VERSION_PATCH 0)
set(CONTRIBUTION_START 2021)
set(CONTRIBUTION_END 2024)

if(NOT GIT_FOUND OR GIT_DESCRIBE_ERROR_CODE)

    set(${PROJECT_NAME}_CONTRIBUTION_START "${CONTRIBUTION_START}")
    set(${PROJECT_NAME}_CONTRIBUTION_END "${CONTRIBUTION_END}")

    set(${PROJECT_NAME}_VERSION_MAJOR ${LATEST_VERSION_MAJOR})
    set(${PROJECT_NAME}_VERSION_MINOR ${LATEST_VERSION_MINOR})
    set(${PROJECT_NAME}_VERSION_PATCH ${LATEST_VERSION_PATCH})

else()

    # Get partial versions into a list
    string(REGEX MATCHALL "-.*$|[0-9]+" ${PROJECT_NAME}_PARTIAL_VERSION_LIST ${${PROJECT_NAME}_VERSION_STRING})

    # Set the version numbers
    list(GET ${PROJECT_NAME}_PARTIAL_VERSION_LIST 0 ${PROJECT_NAME}_VERSION_MAJOR)
    list(GET ${PROJECT_NAME}_PARTIAL_VERSION_LIST 1 ${PROJECT_NAME}_VERSION_MINOR)
    list(GET ${PROJECT_NAME}_PARTIAL_VERSION_LIST 2 ${PROJECT_NAME}_VERSION_PATCH)

    if(NOT ${LATEST_VERSION_MAJOR} EQUAL ${${PROJECT_NAME}_VERSION_MAJOR}
       OR NOT ${LATEST_VERSION_MINOR} EQUAL ${${PROJECT_NAME}_VERSION_MINOR}
       OR NOT ${LATEST_VERSION_PATCH} EQUAL ${${PROJECT_NAME}_VERSION_PATCH})

        message(WARNING "${${PROJECT_NAME}_VERSION_STRING} is outdated")

        if(${LATEST_VERSION_MAJOR} GREATER ${${PROJECT_NAME}_VERSION_MAJOR}
           OR NOT ${LATEST_VERSION_MINOR} GREATER ${${PROJECT_NAME}_VERSION_MINOR}
           OR NOT ${LATEST_VERSION_PATCH} GREATER ${${PROJECT_NAME}_VERSION_PATCH})

            set(${PROJECT_NAME}_VERSION_MAJOR ${LATEST_VERSION_MAJOR})
            set(${PROJECT_NAME}_VERSION_MINOR ${LATEST_VERSION_MINOR})
            set(${PROJECT_NAME}_VERSION_PATCH ${LATEST_VERSION_PATCH})
        else()
            message(FATAL_ERROR "You must update the latest version for offline use")
        endif()

    endif()

    unset(${PROJECT_NAME}_PARTIAL_VERSION_LIST)

    execute_process(
        COMMAND ${GIT_EXECUTABLE} log -1 --date=format:%Y --format=%ad
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        OUTPUT_VARIABLE ${PROJECT_NAME}_CONTRIBUTION_END
        RESULT_VARIABLE GIT_DESCRIBE_ERROR_CODE
        OUTPUT_STRIP_TRAILING_WHITESPACE)

    set(${PROJECT_NAME}_CONTRIBUTION_START "${CONTRIBUTION_START}")

    if(NOT ${PROJECT_NAME}_CONTRIBUTION_END EQUAL ${CONTRIBUTION_END})
        message(FATAL_ERROR "You must update the last contribution date for offline use")
    endif()

endif() # if(NOT GIT_FOUND OR GIT_DESCRIBE_ERROR_CODE)

    # ##########################  COMMIT GIT HASH
if (GIT_FOUND)
    execute_process(
        COMMAND ${GIT_EXECUTABLE} log -1 --format="%H"
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        OUTPUT_VARIABLE ${PROJECT_NAME}_HASH
        RESULT_VARIABLE GIT_DESCRIBE_ERROR_CODE
        OUTPUT_STRIP_TRAILING_WHITESPACE)
else()
    string(TIMESTAMP DATE_EPOCH "%s" UTC)
    set(${PROJECT_NAME}_HASH \"${DATE_EPOCH}\")
endif()

# Set project version (without the preceding 'v')
set(${PROJECT_NAME}_VERSION
    ${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_PATCH})
